name: Terraform AWS Transit Gateway VPC Attachment Module
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-transit-gateway-vpc-attachment

description: |-
  This Terraform module, when used with Terragrunt, automates the creation and configuration of AWS Transit Gateway VPC attachments using YAML-based configuration. It streamlines cross-region and cross-account networking by managing multiple VPC attachments to Transit Gateways (TGW).
  #### Features
  - Simplifies the creation of [AWS Transit Gateway VPC attachments](https://docs.aws.amazon.com/vpc/latest/tgw/tgw-vpc-attachments.html) using YAML configuration.
  - Supports multiple VPC attachments with different configurations in a single deployment.
  - Configurable DNS support, IPv6 support, and appliance mode support per attachment.
  - Flexible route table association and propagation controls.
  - Comprehensive tagging support with inheritance from organization-level tags.

# Introduction to the project
introduction: |-
  #### Architecture Overview
  1. **YAML Configuration**: Define VPC attachments using structured YAML format.
  2. **Multiple Attachments**: Support for multiple VPC attachments with different settings.
  3. **Flexible Options**: Configure DNS support, IPv6 support, and appliance mode per attachment.
  4. **Route Management**: Control route table association and propagation per attachment.
  #### Prerequisites
  - A working AWS Transit Gateway in the target region.
  - Existing VPC(s) and subnets for the attachment(s).
  - Terraform **1.3+** and AWS provider **~> 5.0**.
  - AWS credentials configured (e.g., through AWS CLI or environment variables).

# How to use this project
usage: |-
  #### Usage with Terragrunt
  Below is an example of how to structure a Terragrunt configuration using YAML-based attachments.
  ```hcl
  # terragrunt.hcl
  include {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-transit-gateway-vpc-attachment.git?ref=vX.Y.Z"
  }

  inputs = {
    transit_gateway_id = "tgw-0123456789abcdef0"
    vpc_attachments = {
      main = {
        vpc_id     = "vpc-12345"
        subnet_ids = ["subnet-12345", "subnet-67890"]
        dns_support = true
        ipv6_support = false
        appliance_mode_support = false
        transit_gateway_default_route_table_association = true
        transit_gateway_default_route_table_propagation = true
        tags = {
          Environment = "dev"
          Project     = "networking"
        }
      }
    }
  }
  ```
  Replace the placeholder values with valid IDs from your environment.

# Example usage
examples: |-
  #### Multiple VPC Attachments Example
  ``` hcl
  # terragrunt.hcl
  include {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-transit-gateway-vpc-attachment.git"
  }

  inputs = {
    transit_gateway_id = "tgw-abc123"
    vpc_attachments = {
      prod = {
        vpc_id     = "vpc-prod111"
        subnet_ids = ["subnet-abc111", "subnet-xyz222"]
        tags = {
          Environment = "production"
        }
      }
      staging = {
        vpc_id     = "vpc-stage222"
        subnet_ids = ["subnet-def333"]
        dns_support = false
        ipv6_support = true
        tags = {
          Environment = "staging"
        }
      }
    }
  }
  ```

# How to get started quickly
quickstart: |-
  #### Getting Started (Terragrunt Workflow)
  1. **Setup directory**: Create a new directory for your Transit Gateway configuration.
  2. **Prepare YAML configuration**: Define your VPC attachments using the following structure:
     ```yaml
     vpc_attachments:
       attachment_name:
         vpc_id: vpc-id
         subnet_ids: [subnet-id1, subnet-id2]
         dns_support: true
         ipv6_support: false
         appliance_mode_support: false
         tags:
           Key: Value
     ```
  3. **Create terragrunt.hcl**: Use the configuration example from the usage section.
  4. **Deploy**:
     - `terragrunt init` to initialize the configuration
     - `terragrunt plan` to review changes
     - `terragrunt apply` to create attachments

  #### Validation
  - Use `terragrunt validate` to check configuration syntax
  - Review the AWS Console to verify attachment status
  - Check route table associations and propagation settings

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"